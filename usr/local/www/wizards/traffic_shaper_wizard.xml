<?xml version="1.0" encoding="utf-8" ?>
<pfsensewizard>
<copyright>
/* $Id$ */
/*
	traffic_shaper_wizard.xml
        part of pfSense (http://www.pfsense.org/)

        Copyright (C) 2005 Bill Marquette - bill.marquette@gmail.com.
        All rights reserved.

        Redistribution and use in source and binary forms, with or without
        modification, are permitted provided that the following conditions are met:

        1. Redistributions of source code must retain the above copyright notice,
           this list of conditions and the following disclaimer.

        2. Redistributions in binary form must reproduce the above copyright
           notice, this list of conditions and the following disclaimer in the
           documentation and/or other materials provided with the distribution.

        THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
        INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
        AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
        AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
        OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
        SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
        INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
        CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
        ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
        POSSIBILITY OF SUCH DAMAGE.
*/
</copyright>
<totalsteps>6</totalsteps>
<step>
	<id>1</id>
	<title>pfSense Traffic Shaper Wizard</title>
	<disableheader>true</disableheader>
	<description>This wizard will guide you through setting up the pfSense traffic shaper.</description>
	<fields>
		<field>
			<name>Next</name>
			<type>submit</type>
			<warning>Going any further will wipe your existing shaper config!</warning>
		</field>
	</fields>
	<stepsubmitphpaction>
		/* wipe previous */
		unset($config['shaper']['queue']);
		unset($config['shaper']['rule']);
		$config['shaper']['enable'] = FALSE;
	</stepsubmitphpaction>
</step>
<step>
	<id>2</id>
	<title>pfSense Traffic Shaper Wizard</title>
	<description>WAN connection speed</description>
        <javascriptafterformdisplay>
        </javascriptafterformdisplay>
	<fields>
                <field>
                        <name>Download</name>
                        <description>The download speed of your WAN link in Kbits/second.</description>
                        <type>input</type>
			<validate>^[0-9]*$</validate>
			<message>Download speed must be numerical</message>
                </field>
                <field>
                        <name>Upload</name>
                        <description>The upload speed of your WAN link in Kbits/second.</description>
                        <type>input</type>
			<validate>^[0-9]*$</validate>
			<message>Upload speed must be numerical</message>
                </field>
		<field>
			<name>Next</name>
			<type>submit</type>
		</field>
	</fields>
	<stepsubmitphpaction>
/* XXX we need to bail and force the user to redo this step if the WAN speeds are 0 */
		/* Magic shaper uses HFSC */
		$config['system']['schedulertype'] = "hfsc";

		/* Create queues */
		/* WAN queues */
		$queue = array();
		$queue['name'] = "qWANRoot";
		$queue['associatedrule'] = 0;
		$queue['priority'] = 6;
		$queue['parentqueue'] = "on";
/*
		$queue['realtime'] = "on";
		$queue['realtime1'] = (int)$_POST['upload'] * 0.7 . "Kb";
		$queue['realtime2'] = "1";
		$queue['realtime3'] = (int)$_POST['upload'] * 0.7 . "Kb";
		$queue['upperlimit'] = "on";
		$queue['upperlimit1'] = (int)$_POST['upload'] * 0.8 . "Kb";
		$queue['upperlimit2'] = "1";
		$queue['upperlimit3'] = (int)$_POST['upload'] * 0.8 . "Kb";
		$queue['linkshare'] = "on";
		$queue['linkshare1'] = (int)$_POST['upload'] * 0.8 . "Kb";
		$queue['linkshare2'] = "1";
		$queue['linkshare3'] = (int)$_POST['upload'] * 0.8 . "Kb";
*/
		$queue['bandwidth'] = (int)$_POST['upload'];
		$queue['bandwidthtype'] = "Kb";
		$config['shaper']['queue'][] = $queue;

                $queue = array();
                $queue['name'] = "qWANdef";
                $queue['attachtoqueue'] = "qWANRoot";
                $queue['associatedrule'] = 0;
		$queue['defaultqueue'] = 'true';
                $queue['priority'] = 3;
                $queue['realtime'] = "on";
                $queue['realtime1'] = "10%";
                $queue['realtime2'] = "1";
                $queue['realtime3'] = "10%";
                $queue['upperlimit'] = "on";
                $queue['upperlimit1'] = "90%";
                $queue['upperlimit2'] = "1";
                $queue['upperlimit3'] = "90%";
                $queue['linkshare'] = "on";
                $queue['linkshare1'] = "1%";
                $queue['linkshare2'] = "1";
                $queue['linkshare3'] = "1%";
		$queue['bandwidth'] = "0";
		$queue['bandwidthtype'] = "Kb";
                $config['shaper']['queue'][] = $queue;

		/* LAN queue */
		$queue = array();
		$queue['name'] = "qLANRoot";
		$queue['associatedrule'] = 0;
		$queue['priority'] = 6;
		$queue['parentqueue'] = "on";
/*
		$queue['realtime'] = "on";
		$queue['realtime1'] = (int) $_POST['download'] * 0.7 . "Kb";
		$queue['realtime2'] = "1";
		$queue['realtime3'] = (int) $_POST['download'] * 0.7 . "Kb";
		$queue['upperlimit'] = "on";
		$queue['upperlimit1'] = (int) $_POST['download'] * 0.8 . "Kb";
		$queue['upperlimit2'] = "1";
		$queue['upperlimit3'] = (int) $_POST['download'] * 0.8 . "Kb";
		$queue['linkshare'] = "on";
		$queue['linkshare1'] = (int)$_POST['upload'] * 0.8 . "Kb";
		$queue['linkshare2'] = "1";
		$queue['linkshare3'] = (int)$_POST['upload'] * 0.8 . "Kb";
*/
		$queue['bandwidth'] = (int)$_POST['download'];
		$queue['bandwidthtype'] = "Kb";
		$config['shaper']['queue'][] = $queue;

                $queue = array();
                $queue['name'] = "qLANdef";
                $queue['priority'] = 3;
                $queue['attachtoqueue'] = "qLANRoot";
                $queue['associatedrule'] = 0;
		$queue['defaultqueue'] = 'true';
                $queue['realtime'] = "on";
                $queue['realtime1'] = "10%";
                $queue['realtime2'] = "1";
                $queue['realtime3'] = "10%";
                $queue['upperlimit'] = "on";
                $queue['upperlimit1'] = "90%";
                $queue['upperlimit2'] = "1";
                $queue['upperlimit3'] = "90%";
                $queue['linkshare'] = "on";
                $queue['linkshare1'] = "1%";
                $queue['linkshare2'] = "1";
                $queue['linkshare3'] = "1%";
		$queue['bandwidth'] = "0";
		$queue['bandwidthtype'] = "Kb";
                $config['shaper']['queue'][] = $queue;

                $queue = array();
                $queue['name'] = "qLANacks";
		$queue['ack'] = TRUE;
                $queue['attachtoqueue'] = "qLANRoot";
                $queue['associatedrule'] = 0;
                $queue['priority'] = 7;
                $queue['realtime'] = "on";
                $queue['realtime1'] = "10%";
                $queue['realtime2'] = "1";
                $queue['realtime3'] = "10%";
                $queue['upperlimit'] = "on";
                $queue['upperlimit1'] = "90%";
                $queue['upperlimit2'] = "1";
                $queue['upperlimit3'] = "90%";
                $queue['linkshare'] = "on";
                $queue['linkshare1'] = "1%";
                $queue['linkshare2'] = "1";
                $queue['linkshare3'] = "1%";
		$queue['bandwidth'] = "0";
		$queue['bandwidthtype'] = "Kb";
                $config['shaper']['queue'][] = $queue;

                $queue = array();
                $queue['name'] = "qWANacks";
		$queue['ack'] = TRUE;
                $queue['attachtoqueue'] = "qWANRoot";
                $queue['associatedrule'] = 0;
                $queue['priority'] = 7;
                $queue['realtime'] = "on";
                $queue['realtime1'] = "10%";
                $queue['realtime2'] = "1";
                $queue['realtime3'] = "10%";
                $queue['upperlimit'] = "on";
                $queue['upperlimit1'] = "90%";
                $queue['upperlimit2'] = "1";
                $queue['upperlimit3'] = "90%";
                $queue['linkshare'] = "on";
                $queue['linkshare1'] = "1%";
                $queue['linkshare2'] = "1";
                $queue['linkshare3'] = "1%";
		$queue['bandwidth'] = "0";
		$queue['bandwidthtype'] = "Kb";
                $config['shaper']['queue'][] = $queue;

/* XXX create default rules here */
	</stepsubmitphpaction>
</step>
<step>
        <id>3</id>
        <title>pfSense Traffic Shaper Wizard</title>
        <description>Voice over IP</description>
        <fields>
                <field>
                        <name>Enable</name>
                        <type>checkbox</type>
			<typehint>Prioritize Voice over IP traffic</typehint>
                        <description>This will raise the priority of VOIP traffic above all other traffic.</description>
                </field>
                <field>
                        <name>Provider</name>
                        <type>select</type>
			<description>Choose Generic if your provider isn't listed.</description>
                        <options>
                                <option>
                                        <name>Generic</name>
                                        <value>Generic</value>
                                </option>
                                <option>
                                        <name>VoicePulse</name>
                                        <value>VoicePulse</value>
                                </option>
                                <option>
                                        <name>Vonage</name>
                                        <value>Vonage</value>
                                </option>
			</options>
		</field>
		<field>
                        <name>Bandwidth</name>
                        <type>select</type>
			<typehint>Bandwidth guarantee for VOIP phone</typehint>
			<options>
				<option>
					<name>128Kbits/sec</name>
					<value>128</value>
				</option>
				<option>
					<name>96Kbits/sec</name>
					<value>96</value>
				</option>
				<option>
					<name>64Kbits/sec</name>
					<value>64</value>
				</option>
				<option>
					<name>32Kbits/sec</name>
					<value>32</value>
				</option>
			</options>
		</field>
                <field>
                        <name>Next</name>
                        <type>submit</type>
                </field>
        </fields>
	<stepsubmitphpaction>
		if ( $_POST['enable'] ) {
	                /* create qVOIPUp */
	                $queue = array();
	                $queue['name'] = "qVOIPUp";
	                $queue['associatedrule'] = 0;
	                $queue['priority'] = 7;
	                $queue['red'] = "on";
	                $queue['ecn'] = "on";
			$queue['realtime'] = "on";
	                $queue['realtime1'] = $_POST['bandwidth'] . "Kb";
                        $queue['realtime2'] = "1";
                        $queue['realtime3'] = $_POST['bandwidth'] . "Kb";
 	                $queue['upperlimit'] = "on";
 	                $queue['upperlimit1'] = $_POST['bandwidth'] . "Kb";
 	                $queue['upperlimit2'] = "1";
 	                $queue['upperlimit3'] = $_POST['bandwidth'] . "Kb";
 	                $queue['linkshare'] = "on";
 	                $queue['linkshare1'] = $_POST['bandwidth'] . "Kb";
 	                $queue['linkshare2'] = "1";
 	                $queue['linkshare3'] = $_POST['bandwidth'] . "Kb";
			$queue['bandwidth'] = "0";
			$queue['bandwidthtype'] = "Kb";
 	                $queue['attachtoqueue'] = "qWANRoot";
 	                $config['shaper']['queue'][] = $queue;

 	                /* create qVOIPDown */
 	                $queue = array();
 	                $queue['name'] = "qVOIPDown";
 	                $queue['associatedrule'] = 0;
 	                $queue['priority'] = 7;
 	                $queue['red'] = "on";
 	                $queue['ecn'] = "on";
 	                $queue['realtime'] = "on";
 	                $queue['realtime1'] = $_POST['bandwidth'] . "Kb";
 	                $queue['realtime2'] = "1";
 	                $queue['realtime3'] = $_POST['bandwidth'] . "Kb";
 	                $queue['upperlimit'] = "on";
 	                $queue['upperlimit1'] = $_POST['bandwidth'] . "Kb";
 	                $queue['upperlimit2'] = "1";
 	                $queue['upperlimit3'] = $_POST['bandwidth'] . "Kb";
 	                $queue['linkshare'] = "on";
 	                $queue['linkshare1'] = $_POST['bandwidth'] . "Kb";
 	                $queue['linkshare2'] = "1";
 	                $queue['linkshare3'] = $_POST['bandwidth'] . "Kb";
			$queue['bandwidth'] = "0";
			$queue['bandwidthtype'] = "Kb";
 	                $queue['attachtoqueue'] = "qLANRoot";
 	                $config['shaper']['queue'][] = $queue;

			/* create VOIP rules */
			$rule = array();
			$rule['descr'] = "DiffServ/Lowdelay/Upload";
			$rule['inqueue'] = "qVOIPDown";
			$rule['outqueue'] = "qVOIPUp";
			$rule['interface'] = "lan";
			$rule['source']['network'] = 'lan';
			$rule['destination']['any'] = TRUE;
			$rule['iptos'] = "lowdelay";
			$config['shaper']['rule'][] = $rule;

			$rule = array();
			$rule['descr'] = "DiffServ/Lowdelay/Download";
			$rule['inqueue'] = "qVOIPUp";
			$rule['outqueue'] = "qVOIPDown";
			$rule['interface'] = "wan";
			$rule['source']['any'] = TRUE;
			$rule['destination']['network'] = 'lan';
			$rule['iptos'] = "lowdelay";
			$config['shaper']['rule'][] = $rule;
		}
                
                /* setup vonage rule */
                $voiplist[] = array('Vonage','udp','5060','5060','both');
                
		/* Set up/down games as higher weight */
		/* loop through voiplist[] */
		foreach ($voiplist as $voip) {
		    foreach (array('source','destination') as $srcdest) {
			    $rule = array();
			    if ($srcdest == 'source') {
				    $destsrc = 'destination';
				    $rule['outqueue'] = 'qVOIPUp';
				    $rule['inqueue'] = 'qVOIPDown';
				    $rule['interface'] = 'lan';
				    $rule['source']['network'] = 'lan';
				    $rule['destination']['any'] = TRUE;
				    $rule['descr'] = "m_voip {$voip[0]} outbound";
			    } else {
				    $destsrc = 'source';
				    $rule['outqueue'] = 'qVOIPDown';
				    $rule['inqueue'] = 'qVOIPUp';
				    $rule['interface'] = 'wan';
				    $rule['source']['any'] = TRUE;
				    $rule['destination']['network'] = 'lan';
				    $rule['descr'] = "m_voip {$voip[0]} inbound";
			    }
    
			    $rule['destination']['port'] = $voip[2]."-".$voip[3];
			    if($voip[1] != '')
				    $rule['protocol'] = $voip[1];
    
			    $config['shaper']['rule'][] = $rule;
		    }
		}                
                
	</stepsubmitphpaction>
</step>
<step>
        <id>4</id>
        <title>pfSense Traffic Shaper Wizard</title>
        <description>Peer to Peer networking</description>
	<disableallfieldsbydefault>true</disableallfieldsbydefault>
        <fields>
	
                <field>
			<donotdisable>true</donotdisable>
                        <name>Enable</name>
                        <type>checkbox</type>
                        <typehint>Prioritize Peer-to-Peer traffic</typehint>
                        <description>This will lower the priority of P2P traffic below all other traffic.</description>
			<enablefields>Aimster,BitTorrent,BuddyShare,CuteMX,DCplusplus,dcc,DirectConnect,DirectFileExpress,EDonkey2000,FastTrack,Gnutella,grouper,hotComm,HotlineConnect,iMest,Napster,OpenNap,Scour,SongSpy,WinMX</enablefields>
                </field>
                <field>
                        <name>Next</name>
                        <type>submit</type>
                </field>
                <field>
                        <name>Enable/Disable specific P2P protocols</name>
                        <type>listtopic</type>
                </field>
                <field>
                        <name>Aimster</name>
                        <type>checkbox</type>
			<typehint>Aimster and other P2P using the Aimster protocol and ports</typehint>
                </field>
                <field>
                        <name>BitTorrent</name>
                        <type>checkbox</type>
			<typehint>Bittorrent and other P2P using the Torrent protocol and ports</typehint>
                </field>
                <field>
                        <name>BuddyShare</name>
                        <type>checkbox</type>
			<typehint>BuddyShare and other P2P using the BuddyShare protocol and ports</typehint>
                </field>
                <field>
                        <name>CuteMX</name>
                        <type>checkbox</type>
			<typehint>CuteMX and other P2P using the CuteMX protocol and ports</typehint>
                </field>
                <field>
                        <name>DCplusplus</name>
                        <type>checkbox</type>
			<typehint>DC++ and other P2P using the DC++ protocol and ports</typehint>
                </field>
                <field>
                        <name>DCC</name>
                        <type>checkbox</type>
			<typehint>irc DCC file transfers</typehint>
                </field>
                <field>
                        <name>DirectConnect</name>
                        <type>checkbox</type>
			<typehint>DirectConnect and other P2P using the DirectConnect protocol and ports</typehint>
                </field>
                <field>
                        <name>DirectFileExpress</name>
                        <type>checkbox</type>
			<typehint>DirectFileExpress and other P2P using the DirectFileExpress protocol and ports</typehint>
                </field>
                <field>
                        <name>eDonkey2000</name>
                        <type>checkbox</type>
			<typehint>eDonkey and other P2P using the eDonkey protocol and ports</typehint>
                </field>
                <field>
                        <name>FastTrack</name>
                        <type>checkbox</type>
			<typehint>FastTrack and other P2P using the FastTrack protocol and ports</typehint>
                </field>
                <field>
                        <name>Gnutella</name>
                        <type>checkbox</type>
			<typehint>Gnutella and other P2P using the Gnutella protocol and ports</typehint>
                </field>
                <field>
                        <name>grouper</name>
                        <type>checkbox</type>
			<typehint>grouper and other P2P using the grouper protocol and ports</typehint>
                </field>
                <field>
                        <name>hotComm</name>
                        <type>checkbox</type>
			<typehint>hotComm and other P2P using the hotComm protocol and ports</typehint>
                </field>
                <field>
                        <name>HotlineConnect</name>
                        <type>checkbox</type>
			<typehint>HotlineConnect and other P2P using the HotlineConnect protocol and ports</typehint>
                </field>
                <field>
                        <name>iMest</name>
                        <type>checkbox</type>
			<typehint>iMest and other P2P using the iMest protocol and ports</typehint>
                </field>
                <field>
                        <name>Napster</name>
                        <type>checkbox</type>
			<typehint>Napster and other P2P using the Napster protocol and ports</typehint>
                </field>
                <field>
                        <name>OpenNap</name>
                        <type>checkbox</type>
			<typehint>OpenNap and other P2P using the OpenNap protocol and ports</typehint>
                </field>
                <field>
                        <name>Scour</name>
                        <type>checkbox</type>
			<typehint>Scour and other P2P using the Scour protocol and ports</typehint>
                </field>
                <field>
                        <name>SongSpy</name>
                        <type>checkbox</type>
			<typehint>SongSpy and other P2P using the SongSpy protocol and ports</typehint>
                </field>
                <field>
                        <name>WinMX</name>
                        <type>checkbox</type>
			<typehint>WinMX and other P2P using the WinMX protocol and ports</typehint>
                </field>
                <field>
                        <name>Next</name>
                        <type>submit</type>
                </field>
        </fields>
	<stepsubmitphpaction>

	/* XXX - billm - needs to actually honor what the user selects still */
	if ( $_POST['enable'] ) {

		/* To add p2p clients, push Descr,Protocol,Start,End,src/dest/both onto p2plist */
		$p2plist[] = array('Aimster','tcp','7668','7668','both');
		$p2plist[] = array('BitTorrent','tcp','6881','6999','both');
		$p2plist[] = array('BuddyShare','tcp','7788','7788','both');
		$p2plist[] = array('CuteMX','tcp','2340','2340','both');
		$p2plist[] = array('DC++','tcp','1412','1412','both');
		$p2plist[] = array('dcc','tcp','6666','6668','both');
		$p2plist[] = array('DirectConnect','tcp','412','412','both');
		$p2plist[] = array('DirectFileExpress','tcp','1044','1045','both');
		$p2plist[] = array('EDonkey2000','tcp','4661','4665','both');
		$p2plist[] = array('FastTrack','tcp','1214','1214','both');
		$p2plist[] = array('Gnutella','tcp','6346','6346','both');
		$p2plist[] = array('grouper','tcp','8038','8039','both');
		$p2plist[] = array('hotComm','tcp','28864','28865','both');
		$p2plist[] = array('HotlineConnect','tcp','5500','5503','both');
		$p2plist[] = array('iMest','tcp','4329','4329','both');
		$p2plist[] = array('Napster','tcp','6699','6701','both');
		$p2plist[] = array('OpenNap','tcp','8888','8889','both');
		$p2plist[] = array('Scour','tcp','8311','8311','both');
		$p2plist[] = array('SongSpy','tcp','5190','5190','both');
		$p2plist[] = array('WinMX','tcp','6699','6699','both');

		/* Set up/down p2p as lowest weight */
		/* loop through p2plist[] */
		foreach ($p2plist as $p2pclient) {
			foreach (array('source','destination') as $srcdest) {
				$rule = array();
				if ($srcdest == 'source') {
					$destsrc = 'destination';
					$rule['outqueue'] = 'qP2PUp';
					$rule['inqueue'] = 'qP2PDown';
					$rule['interface'] = 'lan';
					$rule['source']['network'] = 'lan';
					$rule['destination']['any'] = TRUE;
					$rule['descr'] = "m_P2P {$p2pclient[0]} outbound";
				} else {
					$destsrc = 'source';
					$rule['outqueue'] = 'qP2PDown';
					$rule['inqueue'] = 'qP2PUp';
					$rule['interface'] = 'wan';
					$rule['source']['any'] = TRUE;
					$rule['destination']['network'] = 'lan';
					$rule['descr'] = "m_P2P {$p2pclient[0]} inbound";
				}


				$rule['destination']['port'] = $p2pclient[2]."-".$p2pclient[3];
				if($p2pclient[1] != '')
					$rule['protocol'] = $p2pclient[1];

				$config['shaper']['rule'][] = $rule;
			}
		}

		/* create qP2PUp */
		$queue = array();
		$queue['name'] = "qP2PUp";
		$queue['associatedrule'] = 0;
		$queue['priority'] = 0;
		$queue['red'] = "on";
		$queue['ecn'] = "on";
		$queue['realtime'] = "on";
		$queue['realtime1'] = "1Kb";
		$queue['realtime2'] = "1";
		$queue['realtime3'] = "1Kb";
		$queue['upperlimit'] = "on";
		$queue['upperlimit1'] = "90%";
		$queue['upperlimit2'] = "1";
		$queue['upperlimit3'] = "90%";
		$queue['linkshare'] = "on";
		$queue['linkshare1'] = "0%";
		$queue['linkshare2'] = "1";
		$queue['linkshare3'] = "0%";
		$queue['bandwidth'] = "0";
		$queue['bandwidthtype'] = "Kb";
		$queue['attachtoqueue'] = "qWANRoot";
		$config['shaper']['queue'][] = $queue;

		/* create qP2PDown */
		$queue = array();
		$queue['name'] = "qP2PDown";
		$queue['associatedrule'] = 0;
		$queue['priority'] = 1;
		$queue['red'] = "on";
		$queue['ecn'] = "on";
		$queue['realtime'] = "on";
		$queue['realtime1'] = "1Kb";
		$queue['realtime2'] = "1";
		$queue['realtime3'] = "1Kb";
		$queue['upperlimit'] = "on";
		$queue['upperlimit1'] = "90%";
		$queue['upperlimit2'] = "1";
		$queue['upperlimit3'] = "90%";
		$queue['linkshare'] = "on";
		$queue['linkshare1'] = "1%";
		$queue['linkshare2'] = "1";
		$queue['linkshare3'] = "1%";
		$queue['bandwidth'] = "0";
		$queue['bandwidthtype'] = "Kb";
		$queue['attachtoqueue'] = "qLANRoot";
		$config['shaper']['queue'][] = $queue;
	}	
	</stepsubmitphpaction>
</step>
<step>
        <id>5</id>
        <title>pfSense Traffic Shaper Wizard</title>
	<disableallfieldsbydefault>true</disableallfieldsbydefault>
        <description>Network Games</description>
        <fields>
                <field>
                        <name>Enable</name>
                        <type>checkbox</type>
                        <typehint>Prioritize network gaming traffic</typehint>
                        <description>This will raise the priority of gaming traffic to higher than most traffic.</description>
			<enablefields>Counterstrike,DeltaForce,QuakeIII,TigerWoods2004PS2</enablefields>
			<donotdisable>true</donotdisable>
                </field>
                <field>
                        <name>Enable/Disable specific P2P protocols</name>
                        <type>listtopic</type>
                </field>		
                <field>
                        <name>Counterstrike</name>
                        <type>checkbox</type>
			<typehint>Counterstrike.   The ultimate 1st person shooter.</typehint>
                </field>
                <field>
                        <name>DeltaForce</name>
                        <type>checkbox</type>
			<typehint>Delta Force</typehint>
                </field>
                <field>
                        <name>QuakeIII</name>
                        <type>checkbox</type>
			<typehint>Quake III</typehint>
                </field>
                <field>
                        <name>TigerWoods2004PS2</name>
                        <type>checkbox</type>
			<typehint>Tiger Woods 2004 for PS2</typehint>
                </field>
                <field>
                        <name>CallOfDuty</name>
                        <type>checkbox</type>
			<typehint>Call Of Duty (United Defense)</typehint>
                </field>
                <field>
                        <name>Next</name>
                        <type>submit</type>
                </field>
        </fields>
	<stepsubmitphpaction>
	/* XXX - billm - needs to actually honor what the user selects still */
	if ( $_POST['enable'] ) {
		/* create qGamesUp queue */
		$queue = array();
		$queue['name'] = "qGamesUp";
		$queue['associatedrule'] = 0;
		$queue['priority'] = 5;
		$queue['red'] = "on";
		$queue['ecn'] = "on";
		$queue['realtime'] = "on";
		$queue['realtime1'] = "1Kb";
		$queue['realtime2'] = "1";
		$queue['realtime3'] = "1Kb";
		$queue['upperlimit'] = "on";
		$queue['upperlimit1'] = "90%";
		$queue['upperlimit2'] = "1";
		$queue['upperlimit3'] = "90%";
		$queue['linkshare'] = "on";
		$queue['linkshare1'] = "1%";
		$queue['linkshare2'] = "1";
		$queue['linkshare3'] = "1%";
		$queue['bandwidth'] = "0";
		$queue['bandwidthtype'] = "Kb";
		$queue['attachtoqueue'] = "qWANRoot";
		$config['shaper']['queue'][] = $queue;
	    
		/* create qGamesDown queue */
		$queue = array();
		$queue['name'] = "qGamesDown";
		$queue['associatedrule'] = 0;
		$queue['priority'] = 5;
		$queue['red'] = "on";
		$queue['ecn'] = "on";
		$queue['realtime'] = "on";
		$queue['realtime1'] = "1Kb";
		$queue['realtime2'] = "1";
		$queue['realtime3'] = "1Kb";
		$queue['upperlimit'] = "on";
		$queue['upperlimit1'] = "90%";
		$queue['upperlimit2'] = "1";
		$queue['upperlimit3'] = "90%";
		$queue['linkshare'] = "on";
		$queue['linkshare1'] = "1%";
		$queue['linkshare2'] = "1";
		$queue['linkshare3'] = "1%";
		$queue['bandwidth'] = "0";
		$queue['bandwidthtype'] = "Kb";
		$queue['attachtoqueue'] = "qLANRoot";
		$config['shaper']['queue'][] = $queue;
			
		$gamesplist = array();
		/* counter strike */
		$gamesplist[] = array('Titan','udp','6003','6003','both');
		$gamesplist[] = array('Authentication','udp','7002','7002','both');
		$gamesplist[] = array('Client','udp','6003','6003','both');
		$gamesplist[] = array('Masterserver','udp','27010','27010','both');
		$gamesplist[] = array('Mod-Server','udp','27011','27011','both');
		$gamesplist[] = array('Chat','udp','27012','27012','both');
		$gamesplist[] = array('HL-Serverport ','udp','27015','27015','both');
    
		/* delta force */
		$gamesplist[] = array('Delta1','udp','17478','17488','both');

		/* quake3 */
		$gamesplist[] = array('Delta1','udp','27910','27919','both');
    
		/* tiger woods 2004 ps2 */
		$gamesplist[] = array('Outbound2Player','udp','3658','3658','both');
		$gamesplist[] = array('Outbound2Player2','udp','6000','6000','both');	    
		$gamesplist[] = array('Outbound2EA','tcp','10300','10301','both');

		/* Call of Duty (United Defense) */
		$gamesplist[] = array('CallOfDuty1','tcp','28960','28960','both');
		$gamesplist[] = array('CallOfDuty2','udp','28960','28960','both');
		
		/* XXX: add some more games here! */
    
		/* Set up/down games as higher weight */
		/* loop through p2plist[] */
		foreach ($gamesplist as $Gameclient) {
		    foreach (array('source','destination') as $srcdest) {
			    $rule = array();
			    if ($srcdest == 'source') {
				    $destsrc = 'destination';
				    $rule['outqueue'] = 'qGamesUp';
				    $rule['inqueue'] = 'qGamesDown';
				    $rule['interface'] = 'lan';
				    $rule['source']['network'] = 'lan';
				    $rule['destination']['any'] = TRUE;
				    $rule['descr'] = "m_Gam {$Gameclient[0]} outbound";
			    } else {
				    $destsrc = 'source';
				    $rule['outqueue'] = 'qGamesDown';
				    $rule['inqueue'] = 'qGamesUp';
				    $rule['interface'] = 'wan';
				    $rule['source']['any'] = TRUE;
				    $rule['destination']['network'] = 'lan';
				    $rule['descr'] = "m_Gam {$Gameclient[0]} inbound";
			    }
    
			    $rule['destination']['port'] = $Gameclient[2]."-".$Gameclient[3];
			    if($Gameclient[1] != '')
				    $rule['protocol'] = $Gameclient[1];
    
			    $config['shaper']['rule'][] = $rule;
		    }
		}
	}
	</stepsubmitphpaction>
</step>
<step>
        <id>6</id>
        <title>pfSense Traffic Shaper Wizard</title>
        <description>Summary</description>
	<fields>
                <field>
                        <name>Finish</name>
                        <type>submit</type>
                </field>
	</fields>
	<stepsubmitphpaction>
		$config['shaper']['enable'] = TRUE;
		filter_configure();
		header("Location: /");
	</stepsubmitphpaction>
</step>

</pfsensewizard>
