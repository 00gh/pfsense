#!/usr/local/bin/php -f
<?php
/*
        rc.newwanip
        Copyright (C) 2006 Scott Ullrich (sullrich@gmail.com)
        part of pfSense (http://www.pfsense.com)

		Originally part of m0n0wall (http://m0n0.ch)
        Copyright (C) 2003-2005 Manuel Kasper <mk@neon1.net>.
        All rights reserved.

        Redistribution and use in source and binary forms, with or without
        modification, are permitted provided that the following conditions are met:

        1. Redistributions of source code must retain the above copyright notice,
           this list of conditions and the following disclaimer.

        2. Redistributions in binary form must reproduce the above copyright
           notice, this list of conditions and the following disclaimer in the
           documentation and/or other materials provided with the distribution.

        THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
        INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
        AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
        AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
        OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
        SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
        INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
        CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
        ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
        POSSIBILITY OF SUCH DAMAGE.
*/

/* parse the configuration and include all functions used below */
require_once("globals.inc");
require_once("config.inc");
require_once("functions.inc");

/* WAN IP address has changed */

$argument = str_replace("\n", "", $argv[1]);

log_error("Informational: rc.newwanip is starting {$argument}.");

if(empty($argument)) {
    $curwanip = get_interface_ip();
    $interface = "wan";
    $interface_real = get_real_interface();
} else {
        $interface = convert_real_interface_to_friendly_interface_name($argument);
        $interface_real = $argument;
        $curwanip = find_interface_ip($interface_real);
        if($curwanip == "")
                $curwanip = get_interface_ip($interface);
}

log_error("rc.newwanip working with (IP address: {$curwanip}) (interface: {$interface}) (interface real: {$interface_real}).");

if($curwanip == "0.0.0.0") {
        log_error("Failed to update WAN IP, restarting dhclient.");
        exec("dhclient $interface_real");
        exit;
}

/* fallback to rc.newwanip ip if needed */
if(!$old_ip)
	if(file_exists("{$g['vardb_path']}/{$interface}_ip"))
		$old_ip = trim(file_get_contents("{$g['vardb_path']}/{$interface}_ip", "\r"));
if($old_ip) {
	$helpers = exec("/bin/ps awux | grep \"{$old_ip}\" | grep -v \"grep\" | awk '{ print $2 }'");
	if($helpers)
	    mwexec("kill " . trim($helpers));
} else {
	log_error("WARNING! /etc/rc.newwanip could not deterimine the previous ip address ( $interface ).");
}

/* reconfigure IPsec tunnels */
vpn_ipsec_force_reload();

/* start OpenVPN server & clients */
exec("killall -HUP openvpn 2>/dev/null");

/* regenerate resolv.conf if DNS overrides are allowed or the BigPond
   client is enabled */
if (isset($config['system']['dnsallowoverride'])) 
		system_resolvconf_generate(true);

/* perform RFC 2136 DNS update */
services_dnsupdate_process();

/* write current WAN IP to file */
$fd = fopen("{$g['vardb_path']}/{$interface}_ip", "w");
if ($fd) {
	fwrite($fd, $curwanip);
	fclose($fd);
}

log_error("Informational: DHClient spawned /etc/rc.newwanip and the new ip is {$interface} - {$curwanip}.");

touch("/tmp/update_dyndns");

/* signal filter reload */
unlink_if_exists("/tmp/config.cache");
filter_configure();

/* reload graphing functions */
enable_rrd_graphing();

/* restart packages */
if($old_ip <> "") 
	if($old_ip <> $curwanip)
		exec("/etc/rc.start_packages");

/* reconfigure our gateway monitor */
setup_gateways_monitor();

return 0;
?>
