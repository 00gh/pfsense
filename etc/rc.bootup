#!/usr/local/bin/php -f
<?php
/* $Id$ */
/*
	rc.bootup
	part of pfSense by Scott Ullrich
	originally based on m0n0wall (http://m0n0.ch/wall)

	Copyright (C) 2003-2004 Manuel Kasper <mk@neon1.net>.
	All rights reserved.

	Redistribution and use in source and binary forms, with or without
	modification, are permitted provided that the following conditions are met:

	1. Redistributions of source code must retain the above copyright notice,
	   this list of conditions and the following disclaimer.

	2. Redistributions in binary form must reproduce the above copyright
	   notice, this list of conditions and the following disclaimer in the
	   documentation and/or other materials provided with the distribution.

	THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
	INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
	AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
	AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
	OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
	SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
	INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
	CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	POSSIBILITY OF SUCH DAMAGE.
*/

function rescue_detect_keypress() {
	// How long do you want the script to wait before moving on (in seconds)
	$timeout=9;
	echo "\n";
    echo "[ Press R to enter recovery mode or ]\n";
	echo "[  press I to launch the installer  ]\n\n";
	echo "(R)ecovery mode can assist by rescuing config.xml\n";
	echo "from a broken hard disk installation, etc.\n\n";
	echo "Alternatively the (I)nstaller may be invoked now if you do \n";
	echo "not wish to boot into the liveCD environment at this time.\n\n";
	echo "Timeout before auto boot continues (seconds): {$timeout}";
	$key = null;
	exec("/bin/stty erase " . chr(8));
	while(!in_array($key, array("r","R", "i", "I", "~", "!"))) {
	        echo chr(8) . "{$timeout}";
	        `/bin/stty -icanon min 0 time 25`;
	        $key = trim(`KEY=\`dd count=1 2>/dev/null\`; echo \$KEY`);
	        `/bin/stty icanon`;
	        // Decrement our timeout value
	        $timeout--;
	        // If we have reached 0 exit and continue on
	        if ($timeout == 0) 
				break;
	}
	// If R or I was pressed do our logic here
	if (in_array($key, array("r", "R"))) {
	  putenv("TERM=cons25");
	  echo "\n\nRecovery mode selected...\n";
	  passthru("/usr/bin/env TERM=cons25 /bin/tcsh -c /scripts/lua_installer_rescue");
	} elseif (in_array($key, array("i", "I"))) {
	  putenv("TERM=cons25");  
	  echo "\n\nInstaller mode selected...\n";
	  passthru("/usr/bin/env TERM=cons25 /bin/tcsh -c /scripts/lua_installer");
	  if(file_exists("/tmp/install_complete")) {
		passthru("/etc/rc.reboot");
		exit;
	  }
	} elseif (in_array($key, array("!", "~"))) {
 		putenv("TERM=cons25");
		echo "\n\nRecovery shell selected...\n";
		echo "\n";
		touch("/tmp/donotbootup");
		exit;
	} else {
		echo "\n\n";
	}
}

	echo " done.\n";
	echo "Initializing...";
	echo ".";
	require_once("/etc/inc/globals.inc");
	echo ".";
	/* let the other functions know we're booting */
	$pkg_interface = 'console';
	$g['booting'] = TRUE;
	touch("{$g['varrun_path']}/booting");
	if($g['platform'] == "cdrom") {
		$motd = trim(file_get_contents("/etc/motd"));
		if(strlen($motd) > 2) echo "\n{$motd}\n\n";
	}

	/* parse the configuration and include all functions used below */
	require_once("/etc/inc/config.inc");
	echo ".";
	require_once("/etc/inc/functions.inc");
	/* get system memory amount */
	$memory = get_memory();
	$avail = $memory[0];
	echo " done.\n";

	conf_mount_rw();

	/* remove previous firmware upgrade if present */
	if(file_exists("/root/firmware.tgz")) 
		unlink("/root/firmware.tgz");

	/* start devd (dhclient now uses it */
	echo "Starting device manager (devd)...";
	mute_kernel_msgs();
	start_devd();
	set_device_perms();
	unmute_kernel_msgs();
	echo "done.\n";

	// Display rescue configuration option
	if($g['platform'] == "cdrom") 
			rescue_detect_keypress();

	echo "Loading configuration...";
	parse_config_bootup();
	echo "done.\n";

	/* setup php.ini */
	opcode_cache_configuration();

	$lan_if = $config['interfaces']['lan']['if'];
	$wan_if = get_real_wan_interface();

	unmute_kernel_msgs();
	/*
	 *   Determine if we need to throw a interface exception
	 *   and ask the user to reassign interfaces.  This will
	 *   avoid a reboot and thats a good thing.
	 */
	while(is_interface_mismatch() == true) {
		echo "\nNetwork interface mismatch -- Running interface assignment option.\n";
		set_networking_interfaces_ports();
	}

	/* convert config and clean backups */
	echo "Updating configuration...";
	convert_config();
	echo "done.\n";

	echo "Cleaning backup cache...";
	cleanup_backupcache(true);
	echo "done.\n";
	
	/* load glxsb unless it's disabled */
	setup_glxsb();

	/* read in /etc/sysctl.conf and set values if needed */
	echo "Setting up extended sysctls...";
	system_setup_sysctl();
	echo "done.\n";

	/* sync user passwords */
	echo "Syncing user passwords...";
	sync_webgui_passwords();
	echo "done.\n";

	echo "Starting Secure Shell Services...";
	mwexec_bg("/etc/sshd");
	echo "done.\n";

	/* run any early shell commands specified in config.xml */
	system_do_shell_commands(1);

	/* save dmesg output to file */
	system_dmesg_save();

	/* generate resolv.conf */
	system_resolvconf_generate();

	/* set up our timezone */
	system_timezone_configure();

	/* set up our hostname */
	system_hostname_configure();

	/* make hosts file */
	system_hosts_generate();

	/* configure loopback interface */
	interfaces_loopback_configure();

	/* start syslogd */
	system_syslogd_start();

	/* set up VLAN virtual interfaces */
	interfaces_vlan_configure();

	/* set up LAN interface */
	echo "Configuring LAN interface...";
	mute_kernel_msgs();
	interfaces_lan_configure();
	unmute_kernel_msgs();
	echo "done.\n";

	/* set up WAN interface */
	echo "Configuring WAN interface...";
	mute_kernel_msgs();
	interfaces_wan_configure();
	unmute_kernel_msgs();
	echo "done.\n";

	/* set up Optional interfaces */
	echo "Configuring OPT interfaces...";
	if(!$debugging)
		mute_kernel_msgs();
	interfaces_optional_configure();
	if(!$debugging)
		unmute_kernel_msgs();
	echo "done.\n";

	/* bring up carp interfaces */
	interfaces_carp_configure();

	/* generate resolv.conf */
	system_resolvconf_generate();

	/* start the NTP client */
	echo "Starting OpenNTP time client...";
	system_ntp_configure();
	echo "done.\n";

	/* Launch on bootup and keep trying to sync.  Exit once time/date has been sync'd. */
	mwexec_bg("/usr/local/sbin/ntpdate_sync_once.sh");

	/* start pflog */
	filter_pflog_start();

	/* start load balancer daemon */
	load_balancer_use_sticky();
	slbd_configure();

	/* start OpenVPN server & clients */
    openvpn_resync_all();

	/* setup altq + pf */
	echo "Configuring firewall...";
	//mute_kernel_msgs();
	filter_configure_sync();
	//unmute_kernel_msgs();
	echo "done.\n";

	if($avail > 0 and $avail < 65) {
		echo "System has less than 65 megabytes of ram {$avail}.  Delaying webConfigurator startup.\n";
		/* start webConfigurator up on final pass */
		touch("/tmp/restart_webgui");
	} else {
		/* start web server */
		system_webgui_start();
	}

	/* configure cron service */
	configure_cron();

	/* set up static routes */
	system_routing_configure();

	/* enable routing */
	system_routing_enable();

	/* ensure passwords are sync'd */
	system_password_configure();

	/* configure console menu */
	system_console_configure();

	/* start DHCP service */
	services_dhcpd_configure();

	/* start dnsmasq service */
	services_dnsmasq_configure();

	/* start dyndns service */
	services_dyndns_configure();

	/* static IP address? -> attempt DNS update */
	if (is_ipaddr($config['interfaces']['wan']['ipaddr']))
		services_dnsupdate_process();

	/* start DHCP relay */
	services_dhcrelay_configure();

	/* start proxy ARP service */
	services_proxyarp_configure();

	/* setup pppoe and pptp */
	vpn_setup();

	/* start the captive portal */
	captiveportal_configure();

	/* run any shell commands specified in config.xml */
	system_do_shell_commands();

	/* setup polling */
	setup_polling();

	/* setup interface microcode which improves tcp/ip speed */
	echo "Setting up microcode and tx/rx offloading...";
	setup_microcode();
	echo "done.\n";

	mwexec("/sbin/pfctl -f /tmp/rules.debug");

	interfaces_carp_bring_up_final();

	/* start IPsec tunnels */
	vpn_ipsec_configure();

	/* start ftp proxy helpers if they are enabled */
	echo "Starting FTP helpers...";
	system_start_ftp_helpers();
	echo "done.\n";

	/* start SNMP service */
	services_snmpd_configure();

	/* power down hard drive if needed/set */
	system_set_harddisk_standby();

	/* lock down console if necessary */
	if(isset($config['system']['disableconsolemenu']))
		touch("/var/etc/console_lockdown");

	echo "Final filter pass...";
	filter_configure_sync();
	echo "done.\n";

	/* load graphing functions */
	enable_rrd_graphing();

	/*   start DHCP service again now that CARP has settled
	 *   incase user is using primary/backup failover dhcp mode
         */
	services_dhcpd_configure();

	/* startup OLSR if needed */
	setup_wireless_olsr();

	/* startup routed if needed */
	include_once("/usr/local/pkg/routed/routed.inc");
	setup_routed();

	/* if <system><afterbootupshellcmd> exists, execute the command */
	if($config['system']['afterbootupshellcmd'] <> "")
		mwexec($config['system']['afterbootupshellcmd']);

	if($avail < 126) {
		require_once("/etc/inc/notices.inc");
		file_notice("{$g['product_name']}MemoryRequirements", "{$g['product_name']} requires atleast 128 megabytes of RAM.  Expect unusual performance.  This platform is not supported.", "Memory", "", 1);
		mwexec("sysctl net.inet.tcp.recvspace=4096");
		mwexec("sysctl net.inet.tcp.sendspace=4096");
	}

	/* if we are operating at 1000 then increase timeouts.
	   this was never accounted for after moving to 1000 hz */
	$kern_hz = `sysctl kern.clockrate | awk '{ print $5 }' | cut -d"," -f1`;
	$kern_hz = trim($kern_hz, "\r\n");
	if($kern_hz == "1000") 
		mwexec("sysctl net.inet.tcp.rexmit_min=30");

	upnp_start();

	/* done */
	unlink("{$g['varrun_path']}/booting");
	unset($g['booting']);

?>